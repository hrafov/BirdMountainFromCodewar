class Result {    
    public static int[] dryGround(char[][] mountain) {
        if (mountain.length == 0 || mountain[0].length == 0) return new int[]{0, 0, 0, 0};
        int[][] mountainWithNumbers = replaceAllBirdsAndBlanksToNumbers(mountain);
        printMountain(mountainWithNumbers);
        if (allZero(mountainWithNumbers))
            return new int[]{mountain[0].length * mountain.length,
                    mountain[0].length * mountain.length, mountain[0].length * mountain.length,
                    mountain[0].length * mountain.length};
        int[] result = new int[4];
        replace018ReliefToMountainRelief(mountainWithNumbers);
        for(var day = 0; day <= 3; day++) {
            var numberOfDryLandingSpots = countNumberOfDryLandingSpots(mountainWithNumbers);
            result[day] = numberOfDryLandingSpots;
            if (day < 3) floodUpLevelFromZeroToTwo(mountainWithNumbers, day);
        }
        return result;
    }
    private static void replace018ReliefToMountainRelief(int[][] m) {
        for (int level = 1; level < Math.max(m[0].length, m.length); level++) {
            boolean changesInMatrix = false;
            for (int i = 0; i < m.length; i++) {
                for (int j = 0; j < m[0].length; j++) {
                    if (m[i][j] == level &&
                            (i > 0 && m[i - 1][j] >= level && m[i - 1][j] != 8) && //up
                            (j > 0 && m[i][j - 1] >= level && m[i][j - 1] != 8) && //left
                            (j < m[0].length - 1 && m[i][j + 1] >= level && m[i][j + 1] != 8) && //right
                            (i < m.length - 1 && m[i + 1][j] >= level && m[i + 1][j] != 8)) { //down
                        m[i][j] = level + 1;
                        changesInMatrix = true;
                    }
                }
            }
            if (!changesInMatrix) break;
        }
    }
    public static void floodUpLevelFromZeroToTwo(int[][] mountainWithNumbers, int level) {
        boolean upToLevel = false;

        for (int upLevel = 1; upLevel < Math.max(mountainWithNumbers[0].length, mountainWithNumbers.length) * 2; upLevel++) {
            boolean changesInMatrix = false;
            for (int i = 0; i < mountainWithNumbers.length; i++) {
                for (int j = 0; j < mountainWithNumbers[0].length; j++) {

                    if (level == 0) upToLevel = mountainWithNumbers[i][j] == 0;
                    else if (level == 1) upToLevel = mountainWithNumbers[i][j] == 0 || mountainWithNumbers[i][j] == 1;
                    else if (level == 2) upToLevel = mountainWithNumbers[i][j] == 0 || mountainWithNumbers[i][j] == 1 || mountainWithNumbers[i][j] == 2;

                    if (upToLevel &&
                            ((i > 0 && mountainWithNumbers[i - 1][j] == 8) || //up
                                    (j > 0 && mountainWithNumbers[i][j - 1] == 8) || //left
                                    (j < mountainWithNumbers[0].length - 1 && mountainWithNumbers[i][j + 1] == 8) || //right
                                    (i < mountainWithNumbers.length - 1 && mountainWithNumbers[i + 1][j] == 8))) { //down
                        mountainWithNumbers[i][j] = 8;
                        changesInMatrix = true;
                    }
                }
            }
            if (!changesInMatrix) break;
        }
    }
    private static void printMountain(int[][] m) {
        System.out.println();
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++)
                System.out.print(m[i][j]);
            System.out.println();
        }
        System.out.println();
    }
    public static int countNumberOfDryLandingSpots(int[][] m) {
        int riverCount = 0;
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++)
                if (m[i][j] == 8) riverCount++;
        }
        return m[0].length * m.length - riverCount;
    }
    private static int[][] replaceAllBirdsAndBlanksToNumbers(char[][] m) {
        int[][] result = new int[m.length][m[0].length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[0].length; j++) {
                if (m[i][j] == ' ') result[i][j] = 0;
                else if (m[i][j] == '^') result[i][j] = 1;
                else if (m[i][j] == '-') result[i][j] = 8; // 8 - river
                else System.out.println("--- Error: not understandable char - " + m[i][j]);
            }
        }
        return result;
    }
    private static boolean allZero(int[][] m) {
        for (int i = 0; i < m.length; i++)
            for (int j = 0; j < m[0].length; j++)
                if (m[i][j] != 0) return false;
        return true;
    }
    public static void main(String[] args) {
        char[][] terrain = {
                "  ^^^^^^             ".toCharArray(),
                "^^^^^^^^       ^^^   ".toCharArray(),
                "^^^^^^^  ^^^         ".toCharArray(),
                "^^^^^^^  ^^^         ".toCharArray(),
                "^^^^^^^  ^^^         ".toCharArray(),
                "---------------------".toCharArray(),
                "^^^^^                ".toCharArray(),
                "   ^^^^^^^^  ^^^^^^^ ".toCharArray(),
                "^^^^^^^^     ^     ^ ".toCharArray(),
                "^^^^^        ^^^^^^^ ".toCharArray()
        };
        int[] result = dryGround(terrain);
        // int[]{189,99,19,3},
        for (int i: result) System.out.print(i + " ");
    }
}
